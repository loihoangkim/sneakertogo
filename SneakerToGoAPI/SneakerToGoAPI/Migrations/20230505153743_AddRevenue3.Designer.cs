// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SneakerToGoAPI.Models;

#nullable disable

namespace SneakerToGoAPI.Migrations
{
    [DbContext(typeof(SneakerToGoContext))]
    [Migration("20230505153743_AddRevenue3")]
    partial class AddRevenue3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SneakerToGoAPI.Models.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("accountID");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phoneNumber");

                    b.Property<int>("Role")
                        .HasColumnType("int")
                        .HasColumnName("role");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("userName");

                    b.HasKey("AccountId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("SneakerToGoAPI.Models.Bill", b =>
                {
                    b.Property<int>("BillId")
                        .HasColumnType("int")
                        .HasColumnName("billID");

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("accountID");

                    b.Property<string>("AddressOfReceiver")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("addressOfReceiver");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("orderStatus");

                    b.Property<string>("PhoneOfReceiver")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phoneOfReceiver");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("money")
                        .HasColumnName("totalPrice");

                    b.Property<string>("paymentStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("paymentStatus");

                    b.HasKey("BillId");

                    b.HasIndex("AccountId");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("SneakerToGoAPI.Models.BillDetail", b =>
                {
                    b.Property<int>("BillId")
                        .HasColumnType("int")
                        .HasColumnName("billID");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("productID");

                    b.Property<int>("ModelId")
                        .HasColumnType("int")
                        .HasColumnName("modelID");

                    b.Property<decimal>("Price")
                        .HasColumnType("money")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("BillId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("BillDetail", (string)null);
                });

            modelBuilder.Entity("SneakerToGoAPI.Models.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .HasColumnType("int")
                        .HasColumnName("brandID");

                    b.Property<string>("Banner")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("banner");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("createAt");

                    b.Property<int?>("CreateBy")
                        .HasColumnType("int")
                        .HasColumnName("createBy");

                    b.Property<string>("Descreption")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("descreption");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("logo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("slug");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updateAt");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("int")
                        .HasColumnName("updateBy");

                    b.HasKey("BrandId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("SneakerToGoAPI.Models.Cart", b =>
                {
                    b.Property<int>("CardId")
                        .HasColumnType("int")
                        .HasColumnName("cardID");

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("accountID");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("note");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("money")
                        .HasColumnName("totalPrice");

                    b.HasKey("CardId");

                    b.HasIndex("AccountId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("SneakerToGoAPI.Models.CartDetail", b =>
                {
                    b.Property<int>("CardId")
                        .HasColumnType("int")
                        .HasColumnName("cardID");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("productID");

                    b.Property<int>("ModelId")
                        .HasColumnType("int")
                        .HasColumnName("modelID");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("modelName");

                    b.Property<decimal>("Price")
                        .HasColumnType("money")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("CardId", "ProductId");

                    b.ToTable("CartDetail", (string)null);
                });

            modelBuilder.Entity("SneakerToGoAPI.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("categoryID");

                    b.Property<string>("IsDelete")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("isDelete")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("slug");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("SneakerToGoAPI.Models.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .HasColumnType("int")
                        .HasColumnName("imageID");

                    b.Property<string>("Alt")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("alt");

                    b.Property<string>("IsDelete")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("isDelete")
                        .IsFixedLength();

                    b.Property<int>("ModelId")
                        .HasColumnType("int")
                        .HasColumnName("modelID");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("path");

                    b.HasKey("ImageId");

                    b.HasIndex("ModelId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("SneakerToGoAPI.Models.Model", b =>
                {
                    b.Property<int>("ModelId")
                        .HasColumnType("int")
                        .HasColumnName("modelID");

                    b.Property<int?>("BrandId")
                        .HasColumnType("int")
                        .HasColumnName("brandID");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("categoryID");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("createAt");

                    b.Property<int?>("CreateBy")
                        .HasColumnType("int")
                        .HasColumnName("createBy");

                    b.Property<string>("Descreption")
                        .HasColumnType("text")
                        .HasColumnName("descreption");

                    b.Property<int?>("IsDelete")
                        .HasColumnType("int")
                        .HasColumnName("isDelete");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updateAt");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("int")
                        .HasColumnName("updateBy");

                    b.Property<int>("totalQuantity")
                        .HasColumnType("int");

                    b.Property<decimal>("totalRevenue")
                        .HasColumnType("decimal");

                    b.Property<decimal>("totalSales")
                        .HasColumnType("decimal");

                    b.HasKey("ModelId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("SneakerToGoAPI.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("productID");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("createAt");

                    b.Property<int>("CreateBy")
                        .HasColumnType("int")
                        .HasColumnName("createBy");

                    b.Property<string>("IsDelete")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("isDelete")
                        .IsFixedLength();

                    b.Property<int>("ModelId")
                        .HasColumnType("int")
                        .HasColumnName("modelID");

                    b.Property<decimal>("Price")
                        .HasColumnType("money")
                        .HasColumnName("price");

                    b.Property<decimal?>("PriceFake")
                        .HasColumnType("decimal");

                    b.Property<int>("QuanlityRemainning")
                        .HasColumnType("int")
                        .HasColumnName("quanlityRemainning");

                    b.Property<double>("Size")
                        .HasColumnType("float")
                        .HasColumnName("size");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updateAt");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("int")
                        .HasColumnName("updateBy");

                    b.HasKey("ProductId");

                    b.HasIndex("ModelId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("SneakerToGoAPI.Models.Revenue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime");

                    b.Property<decimal>("totalOrder")
                        .HasColumnType("decimal");

                    b.Property<decimal>("totalRevenueOfDay")
                        .HasColumnType("decimal");

                    b.Property<decimal>("totalSalesOfDay")
                        .HasColumnType("decimal");

                    b.HasKey("Id");

                    b.ToTable("Revenues");
                });

            modelBuilder.Entity("SneakerToGoAPI.Models.Bill", b =>
                {
                    b.HasOne("SneakerToGoAPI.Models.Account", "Account")
                        .WithMany("Bills")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_Bills_Accounts");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("SneakerToGoAPI.Models.BillDetail", b =>
                {
                    b.HasOne("SneakerToGoAPI.Models.Bill", "Bill")
                        .WithMany("BillDetails")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SneakerToGoAPI.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SneakerToGoAPI.Models.Cart", b =>
                {
                    b.HasOne("SneakerToGoAPI.Models.Account", null)
                        .WithMany("Carts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SneakerToGoAPI.Models.Image", b =>
                {
                    b.HasOne("SneakerToGoAPI.Models.Model", null)
                        .WithMany("Images")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SneakerToGoAPI.Models.Model", b =>
                {
                    b.HasOne("SneakerToGoAPI.Models.Brand", null)
                        .WithMany("Models")
                        .HasForeignKey("BrandId");

                    b.HasOne("SneakerToGoAPI.Models.Category", null)
                        .WithMany("Models")
                        .HasForeignKey("CategoryId");
                });

            modelBuilder.Entity("SneakerToGoAPI.Models.Product", b =>
                {
                    b.HasOne("SneakerToGoAPI.Models.Model", null)
                        .WithMany("Products")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SneakerToGoAPI.Models.Account", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("Carts");
                });

            modelBuilder.Entity("SneakerToGoAPI.Models.Bill", b =>
                {
                    b.Navigation("BillDetails");
                });

            modelBuilder.Entity("SneakerToGoAPI.Models.Brand", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("SneakerToGoAPI.Models.Category", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("SneakerToGoAPI.Models.Model", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
